## 875. Koko Eating Bananas
[See problem in LeetCode](https://leetcode.com/problems/koko-eating-bananas/description/)   

Koko loves to eat bananas. There are ```n``` piles of bananas, the ```ith``` pile has ```piles[i]``` bananas. The guards have gone and will come back in ```h``` hours.

Koko can decide her bananas-per-hour eating speed of ```k```. Each hour, she chooses some pile of bananas and eats ```k``` bananas from that pile. If the pile has less than ```k``` bananas, she eats all of them instead and will not eat any more bananas during this hour.

Koko likes to eat slowly but still wants to finish eating all the bananas before the guards return.

Return the minimum integer ```k``` such that she can eat all the bananas within ```h``` hours.

Example 1:   
Input: piles = [3,6,7,11], h = 8   
Output: 4


Example 2:                
Input: piles = [30,11,23,4,20], h = 5   
Output: 30


#### Constrains:
- 1 <= ```piles.length``` <= $10^4$
- ```piles.length``` <= ```h``` <= $10^9$   
- 1 <= ```piles[i]``` <= $10^9$ 


### 🚨 **Important:**

- ```piles``` is not sorted
- If ```pile[i] >= k```, koko eats ```k``` bananas , else,  koko eats ```piles[i]``` bananas
- Return the minimum integer k, as long as koko finishes all the bananas

---
### 🌟🌟 **Intuition:** Use Binary Search

- Koko 's speed range can go from ```[1,Math.max(...piles)]```. Since ```piles[i] >= 1``` , each hour koko needs to finish at least 1 banana, and when ```piles.length = h ```, Koko need to eat bananas at speed  ```Math.max(...piles)``` to ensure all bananas are finished.
- Therefore, we can use Binary Search to cut down the speed range in half and try to find the minimum integer ```k``` while the actual bananas eatting hours are less than the ```h```.

#### ⏱️ Timing Complexity: O(log n)

#### 🗯️ Space Complexity: O(1)

### 💡💡 **`Code`**

```JavaScript
/**
 * @param {number[]} piles
 * @param {number} h
 * @return {number}
 */
var minEatingSpeed = function(piles, h) {
    let minSpeed =  1; //min speed starts from 1 
    let maxSpeed= Math.max(...piles);
    if (h === piles.length) {
        return maxSpeed;
    }
    let speed = maxSpeed;
    while (minSpeed <= maxSpeed) {
        let mid = Math.floor((minSpeed + maxSpeed) / 2);
        let hrs = calculateHrs(piles, mid);
        if (hrs <= h) {
            speed = mid;
            maxSpeed = mid - 1;
        } else {
            minSpeed = mid + 1;
        }
    }
    return speed;
};

function calculateHrs(piles, speed) {
    return piles.reduce((hrs,p) => hrs + Math.ceil(p/speed), 0)
}

```

